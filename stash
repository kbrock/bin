#!/usr/bin/env ruby

# git stash help

class Stash
  def usage
    puts "stash [list]           : list of stashes"
    puts "stash head             : lists the first 10 stashes"
    puts "stash wc               : counts the number of stashes"
    puts "stash [push] 'comment' : save stash with comment"
    puts "stash local 'comment'  : saves local tree only (not staged)"
    puts "stash stage 'comment'  : saves stashed files (not local)"
    puts "stash patch 'comment'  : saves (prompts which patches should save) "
    #push does the same thing
    puts "stash [show] [#]       : show stash (list of files) - quick diff"
    puts "stash diff [#]         : show stash (diff)"
    puts "stash pop [#]          : applies and pops stash@{#} or head"
    puts "stash apply [#]        : applies but does NOT drop stash@{#} or head"
    puts "stash merge [#]        : merges stash@{#} or head into current"
    puts "stash drop [#]         : drops/throws away stash@{#} or head"
    puts "stash backup 'comment' : saves stash but leaves files checkedout"
#    puts "stash word # 'comment' : rewords comment for stash@{#}"
  end

  def emphasize(phrase)
    "\e[1;34m#{phrase}\e[0m"
  end

  def run(args)
    if args.size == 0
      list
      puts "---"
      show("0")
      return
    end
    cmd=args[0]
    case cmd
    when /^\d+$/
      #may want to do pop here
      show(cmd)
    when 'help'
      usage
    when 'apply', 'backup', 'diff', 'drop', 'head', 'list', 'local',
         'merge', 'mv', 'patch', 'pluck', 'pop', 'push', 'rename',
         'reword', 'save', 'show', 'stage', 'staged', 'stats', 'stat', 'wc', 'word'
      puts send(cmd, args[1])
    else
      save(cmd)
    end
  end

  def head(count = 10)
    if count.kind_of?(String)
      count = count.to_i
      count = -count if count < 0
    end
    count ||= 10
    list.split("\n")[0...count].join("\n")
  end

  def list(*)
    list = `git stash list --color --pretty=format:'%Cblue%gd%Creset: %s %C(green)(%cr)%Creset'`
    list.gsub(/stash@[{]([0-9]+)[}]/) { $1 }
  end

  def wc(*)
    list = `git stash list | wc -l`
  end

  def common(cmd, stash)
    stash ||= "0"
    `git stash #{cmd} stash@{#{stash}}`
  end

  def show(stash)
    #TODO: loosing all colors
    common 'show --color=always --stat', stash
  end
  alias_method :stat, :show
  alias_method :stats, :show

  def diff(stash)
    common 'show --color=always', stash
    # cmd = 'show --color=always'
    # stash ||= "0"
    # exec "git","stash #{cmd} stash@{#{stash}} | less -r"
  end

  def pop(stash)
    common :pop, stash
  end

  def apply(stash = nil)
    common :apply, stash
  end
  alias_method :pluck, :apply

  def drop(stash)
    common :drop, stash
  end

  def merge(stash)
    stash ||= "0"
    `git stash show -p stash@{#{stash}} | git apply && git stash drop stash@{#{stash}}`
    # apply, drop?
  end

  def save(comment)
    `git stash push -m "#{clean_comment(comment)}"`
  end
  alias_method :push, :save

  def local(comment)
    `git stash push --keep-index -m "#{clean_comment(comment)}"`
  end

  def stage(comment)
    `git stash push --staged -m "#{clean_comment(comment)}"`
  end
  alias_method :staged, :stage

  def patch(comment)
    `git stash push -p -m "#{clean_comment(comment)}"`
  end

  def backup(comment)
    puts save(comment)
    apply(nil)
  end

  private

  def clean_comment(comment)
    raise "Need a comment" if comment.nil?
    comment.gsub('"',"\\\"")
  end

  # reword = pop, push (must be clean first)
  #http://stackoverflow.com/questions/25931026/how-can-i-rename-a-git-stash
  #git config --global alias.stash-rename '!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash push "tmp stash from stash-rename"; git stash apply $rev && shift && git stash push "$@" && [ $s != 0 ] && git stash pop stash@{1}; }; _'
  # def word(stash, comment)
  #   puts `git stash-rename <stash> [push options] [<message>]`
  #   puts `git stash-rename stash@{#{stash}}`
  # end
  # alias_method :reword, :word
  # alias_method :rename, :word
  # alias_method :mv, :word
end

Stash.new.run(ARGV)
