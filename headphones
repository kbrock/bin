#!/usr/bin/env ruby --disable-gems

#### install:
#
# brew install switchaudio-osx
#
###

# use this instead? https://github.com/mw98/alfred-sound-switcher

# Usage: /opt/homebrew/Cellar/switchaudio-osx/1.2.2/SwitchAudioSource [-a] [-c] [-t type] [-n] -s device_name | -i device_id | -u device_uid
#   -a             : shows all devices
#   -c             : shows current device

#   -f format      : output format (cli/human/json). Defaults to human.
#   -t type        : device type (input/output/system/all).  Defaults to output.
#   -m mute        : sets the mute status (mute/unmute/toggle).  For input/output only.
#   -n             : cycles the audio device to the next one
#   -i device_id   : sets the audio device to the given device by id
#   -u device_uid  : sets the audio device to the given device by uid or a substring of the uid
#   -s device_name : sets the audio device to the given device by name

# see https://github.com/alanhg/alfred-workflows/tree/master/switch-audio
# see https://github.com/mike182uk/alfred-switch-audio/tree/main/workflow
#     https://github.com/alexlafroscia/alfred-switch-audio-source
#
# SwitchAudioSource -a -fcli # csv

# LogHead,input,80,
#   AppleUSBAudioEngine:Logitech:LogHead:130000:2,1
# MBP Microphone,input,75,
#   BuiltInMicrophoneDevice
# ZoomAudioDevice,input,106,
#   zoom.us.zoomaudiodevice.001

# LG HDR WQHD,output,91,
#   1E6D2B77-0000-0000-0B1E-0104B5502278
# LogHead,output,80,
#   AppleUSBAudioEngine:Logitech:LogHead:130000:2,1
# MBP Speakers,output,68,
#   BuiltInSpeakerDevice
# ZoomAudioDevice,output,106,
#   zoom.us.zoomaudiodevice.001


# mock json
unless defined?(JSON)
class JSON
  def self.generate(obj)
    obj.inspect.gsub(/([{,]):/){|m|m[0]}.gsub(/=>/,":")
  end
end
end # ifdef

class Headphones
  attr_accessor :verbose
  attr_accessor :target
  # list all targets
  attr_accessor :list

  # @param mode [:input, :output] which sound source
  # @param name [Regexp|String] name of the device to match
  # @return [String] official name of device
  #
  # find_source(:input, "Logitech")
  # SwitchAudioSource -t input -a
  # Built-in Microphone (input)
  # Logitech USB Headset (input)
  # ==> "Logitech USB Headset"
  def find_source(mode, name)
    name = Regexp.new(name, Regexp::IGNORECASE)
    src = sources(mode).select { |n| n =~ name }.first
    src.sub(/ \([a-z]+\)$/,'') if src
  end

  def parse(args)
    # avoiding opt parse to remove reliance on external gems
    # OptionParser.new do |opt|
    #   opt.banner = "Usage: headphones target"
    #   opt.on('-l', '--list', "List all devices") { |x| @list = x }
    #   opt.on('-v', '--verbose', "Verbose")  { |v| @verbose = v }
    #   opt.parse!(args)
    # end

    if args.include?("-h") || args.include?("--help")
      puts "Usage: headphones target"
      puts "-l, --list                       List all devices"
      puts "-v, --verbose                    Verbose"
      exit 1
    end

    @list = true if args.delete("-l") || args.delete("--list")
    @verbose = true if args.delete("-v") || args.delete("--verbose")

    # assume we're enabling the Logitech headphones
    @target = args[0] || "Logitech"
    # headphone jack ==> built in
    @target = "Built-in" if args[0].to_s =~ /jack/i
    self
  end

  def current(mode = :output)
    switch(mode, "-c").tap { |target| puts "%-10s source: #{target.first}" % "current" unless verbose }
  end

  # @param mode [:input|output] device mode
  def sources(mode = :output)
    @sources ||= switch(mode, "-a")
  end

  def set_source(mode, name)
    if (target = find_source(mode, name))
      puts "set %-6s source: %s" % [mode, target] unless verbose
      switch(mode, target)
    else
      puts "unknown    source: %s" % name unless verbose
    end
  end

  def run
    current(:output)

    sources(:output).each { |t| puts "  #{t}" } and return if list
    set_source(:output, target)
    set_source(:input, target)
  end

  def self.run(args)
    new.parse(args).run
  end

  private

  def switch(mode, device = nil)
    return unless device
    device = "-s \"#{device}\"" unless device.start_with?("-")
    cmd = "SwitchAudioSource -t #{mode} #{device}"
    $stderr.puts cmd if verbose
    ret=`#{cmd}`.chomp.tap { |r| puts r,"" if verbose }.split("\n")
    if $?.exitstatus != 0
      unless verbose
        $stderr.puts "error running command:"
        $stderr.puts cmd, ""
      end
      `which SwitchAudioSource > /dev/null`
      if $?.exitstatus != 0
        $stderr.puts "", "please make sure SwitchAudioSource is installed"
        $stderr.puts "", "brew install switchaudio-osxswitchaudio-osx", ""
      end
      $stderr.puts "exiting due to error"
      exit
    end
    ret
  end
end

Headphones.run(ARGV.dup)
