#!/usr/bin/env ruby

require 'pathname'

# add database name into your git config file
# so it takes that database name instead of defaulting to the branch 
class GitDb
  #attr_accessor :remote, :branch, :mode, :params
  attr_accessor :suffix, :branchname
  def run(_env, argv)
    parse_args(argv)

    if suffix.nil? || suffix == "-v"
      puts_suffix("current suffix")
      puts
      puts "options:"
      puts "   -b set suffix to branch name"
      puts "   -X clear suffix"
      puts
      return
    end

    if suffix == "-X" || suffix.empty?
      @suffix = ''
    elsif suffix == "-b"
      @suffix = "_#{branchname.gsub(".","_")}"
    else
      @suffix = "_#{suffix}".gsub(/^.*_(?:development|test)/, '').gsub(/^__+/,'_')
    end

    if suffix != cur_suffix
      puts "suffix #{cur_suffix || "NONE"} => #{suffix}"
      self.cur_suffix = suffix
      puts
      verify_database(suffix) unless suffix.empty?
    else
      puts_suffix("suffix")
    end
  end

  def parse_args(argv)
    @suffix=argv[0]
    @branchname = cur_branch
  end

  def verify_database(suffix)
    db = `psql -l`.chomp.split("\n").map { |x| x.split("|").first.strip }.detect { |x| x =~ /_development#{suffix}$/ }
    if db
      puts "database: #{db}"
    else
      puts "NO DATABASE (*_development#{suffix})"
    end
  end

  def puts_suffix(message)
    cs = cur_suffix
    puts "#{message}: #{cs ? "'#{cs}'" : "NONE"}"
  end


  def cur_suffix
    git("config --get branch.#{branchname}.suffix")
  end

  def cur_suffix=(suffix)
    if suffix.nil? || suffix.empty?
      git("config --unset-all -- branch.#{branchname}.suffix")
    else
      git("config branch.#{branchname}.suffix #{suffix}")
    end
  end

  def cur_branch
    git("symbolic-ref -q --short HEAD")
  end

  def cur_remote(branch = cur_branch)
    git("config branch.#{branch}.remote")
  end

  # echo $(git remote-url $1) | sed -e 'sX^git@\([^:]*\):Xhttp://\1/X' -e 'sX\.git$XX')
  # @param remote_url [String] git@domain:user/repo.git
  # @return http://domain/user/repo/
  def base_url
    # can we leverage url for?
    remote_url = git("config --get remote.#{remote}.url") # TODO: pass in
    remote_url.gsub(%r{^git@([^:]*):}){"http://#{$1}/"}.gsub(/\.git$/,'')
  end

  def git(*args)
    `git #{args.join(" ")}`.chomp # if $? == 0
  end
end

if __FILE__ == $0
  GitDb.new.run(ENV, ARGV)
end

__END__
database.yml:

# PostgreSQL
#
# <%   $db_count ||=0 ; $db_count +=1 %>
# <%   db_suffix = `git config branch.$(git symbolic-ref -q --short HEAD).suffix`.chomp rescue nil %>
# <%   evm_version = File.read(File.join(Rails.root, 'VERSION')).chomp rescue 'master' unless db_suffix %>
# <%   db_suffix ||= (evm_version == 'master') ? '' : "_#{evm_version.split('.')[0..1].join('_')}" %>
# < %   STDERR.puts "** EVM vmdb_#{Rails.env.to_s}#{db_suffix} ** #{$db_count}" % >
---
base: &base
  adapter: postgresql
  encoding: utf8
  username: postgres
  pool: 5
  wait_timeout: 5
  min_messages: warning

development:
  <<: *base
  database: vmdb_development<%=db_suffix %>
  min_messages: notice
test: &test
  <<: *base
  pool: 3
  database: vmdb_test<%=db_suffix %>
  # Silence these: 'NOTICE:  CREATE TABLE will create..
