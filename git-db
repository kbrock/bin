#!/usr/bin/env ruby

require 'pathname'

# add database name into your git config file
# so it takes that database name instead of defaulting to the branch 

class GitDb
  # hack - need a better way
  BASENAME="vmdb_"

  # attribute @test [Boolean] test mode does not exit
  attr_accessor :test
  attr_accessor :new_suffix
  attr_accessor :mode
  def run(_env, argv)
    # parse params
    orig_suffix
    # defaults:
    @new_suffix = orig_suffix
    @mode = :verbose

    option = argv[0]
    case option
    when nil, "-v"
      @mode = :verbose
    when "-s"
      @mode = :suffix
    when "-d"
      @mode = :database
    when "-X", ""
      @new_suffix = ''
    when "-b"
      @new_suffix = "_#{branchname.gsub(".","_")}"
    else
      #@new_suffix = "_#{option}".gsub(/^.*_(?:development|test)/, '').gsub(/^__+/,'_')
      @new_suffix = "_#{option}".gsub(/^#{BASENAME}(?:development|test)/, '').gsub(/^__+/,'_')
    end

    self.cur_suffix = new_suffix if change?

    case @mode
    when :verbose
      if new_suffix == orig_suffix
        puts "suffix: #{quote_suffix(orig_suffix)}"
      else
        puts "suffix: #{quote_suffix(orig_suffix)} => #{quote_suffix(new_suffix)}"
      end
      puts
      if !new_suffix.empty? && change?
        db = dbname
        if db
          puts "database: #{db}"
        else
          puts "NO DATABASE (#{BASENAME}development#{new_suffix})"
        end
        puts
      end
      # unsure if we want to keep this
      puts "options:"
      puts "   -b set suffix to branch name"
      puts "   -X clear suffix"
      puts
    when :database
      puts dbname
    when :suffix
      puts new_suffix
    end

    if test
      !!dbname # true if there is a database
    else
      exit(dbname ? 0 : 1) # 0 if there is a database
    end
  end

  ######### cached / derived functions

  def quote_suffix(suffix)
    suffix && suffix != "" ? "'#{suffix}'" : "NONE"
  end

  def dbname
    @dbname ||= cur_dbname
  end

  def change?
    orig_suffix != new_suffix
  end

  # NOTE: need to set at startup
  def orig_suffix
    @orig_suffix ||= cur_suffix
  end

  def cur_dbname
    `psql -l`.chomp.split("\n").map { |x| x.split("|").first.strip }.detect { |x| x =~ /^#{BASENAME}development#{new_suffix}$/ }
  end

  def cur_suffix
    git("config --get branch.#{branchname}.suffix")
  end

  def cur_suffix=(suffix)
    if suffix.nil? || suffix.empty?
      git("config --unset-all -- branch.#{branchname}.suffix")
    else
      git("config branch.#{branchname}.suffix #{suffix}")
    end
  end

  def branchname
    @branchname ||= cur_branch
  end

  def cur_branch
    git("symbolic-ref -q --short HEAD")
  end

  # def cur_remote(branch = cur_branch)
  #   git("config branch.#{branch}.remote")
  # end

  # echo $(git remote-url $1) | sed -e 'sX^git@\([^:]*\):Xhttp://\1/X' -e 'sX\.git$XX')
  # @param remote_url [String] git@domain:user/repo.git
  # @return http://domain/user/repo/
  def base_url
    # can we leverage url for?
    remote_url = git("config --get remote.#{remote}.url") # TODO: pass in
    remote_url.gsub(%r{^git@([^:]*):}){"http://#{$1}/"}.gsub(/\.git$/,'')
  end

  def git(*args)
    `git #{args.join(" ")}`.chomp # if $? == 0
  end
end

if __FILE__ == $0
  GitDb.new.run(ENV, ARGV)
end

__END__
database.yml:

# PostgreSQL
#
# <%   $db_count ||=0 ; $db_count +=1 %>
# <%   db_suffix = `git config branch.$(git symbolic-ref -q --short HEAD).suffix`.chomp rescue nil %>
# <%   evm_version = File.read(File.join(Rails.root, 'VERSION')).chomp rescue 'master' unless db_suffix %>
# <%   db_suffix ||= (evm_version == 'master') ? '' : "_#{evm_version.split('.')[0..1].join('_')}" %>
# < %   STDERR.puts "** EVM vmdb_#{Rails.env.to_s}#{db_suffix} ** #{$db_count}" % >
---
base: &base
  adapter: postgresql
  encoding: utf8
  username: postgres
  pool: 5
  wait_timeout: 5
  min_messages: warning

development:
  <<: *base
  database: vmdb_development<%=db_suffix %>
  min_messages: notice
test: &test
  <<: *base
  pool: 3
  database: vmdb_test<%=db_suffix %>
  # Silence these: 'NOTICE:  CREATE TABLE will create..
