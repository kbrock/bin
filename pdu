#!/bin/bash

# references:
#   main: https://wiki.postgresql.org/wiki/Disk_Usage
#   alt:  http://www.postgresql.org/docs/9.0/static/disk-usage.html
function usage() {
  echo "usage: $(basename $0) [-h] [-v] [-l limit] [-r] [dbname]" >&2
  echo "    shows disk usage for a database or all databases" >&2
  echo "    -h shows this help message" >&2
  echo "    -v vacuums the db first" >&2
  echo "    -l limits the results (default: 20)" >&2
  echo "    -r order by row count (default: size)" >&2
  echo "    -i include indexes (default: false)" >&2
  echo "    -c show commas" >&2
  echo "    -f show full info on tables" >&2
  exit 1
}

# defaulting limit to 20
limit=20
order="pg_relation_size(C.oid) DESC" # column 2 = disk usage
relkind="AND relkind = 'r'" # limit to tables only (by default)

while getopts "cfhil:rv" opt ; do
  case $opt in
    c) commas="\pset numericlocale" ;;
    h) usage ; exit 1 ;;
    i) relkind="" ;;
    l) limit=$OPTARG ;;
    r) order="reltuples DESC" ;;
    v) vacuum='vacuum full;' ;;
    f) full="true" ;;
    \?) echo "Invalid option: -$OPTARG" >&2 ;;
  esac
done
shift $((OPTIND-1))

dbname="$1"

if [ $# -gt 1 ] ; then # has tablename
  # overloading relkind - sorry
  # SORRY, very rails specific, may like next line better
  # relkind="${relkind} AND (relname = '${2}' OR relname like 'index_${2}%')"
  relkind="${relkind} AND relname like '%${2}%'"
  #order="${order}, relname"
fi

# which database is the biggest
if [ -z "${dbname}" ] ; then
    psql postgres << SQL
    SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner,
        CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
            THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))
            ELSE 'No Access'
        END AS Size
      FROM pg_catalog.pg_database d
      ORDER BY
        CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
            THEN pg_catalog.pg_database_size(d.datname)
            ELSE NULL
        END DESC -- nulls first
      LIMIT ${limit};
SQL
elif [ -n "${full}" ] ; then
  # full display, not just objects
  psql "${dbname}" << SQL
  ${commas}
  ${vacuum}
  SELECT
          CASE WHEN nspname = 'public' THEN relname ELSE nspname || '.' || relname END AS "relation",
          reltuples::integer as "rows",
          pg_size_pretty(pg_total_relation_size(c.oid)) AS total,
          pg_size_pretty(pg_indexes_size(c.oid)) AS index,
          pg_size_pretty(pg_total_relation_size(reltoastrelid)) AS toast,
          pg_size_pretty(pg_relation_size(c.oid)) AS table
    FROM  pg_class c
     LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
    WHERE nspname NOT IN ('pg_catalog', 'information_schema')
    AND relkind = 'r'
    ORDER BY ${order}
    LIMIT ${limit};
SQL
else # which table objects are the biggest?
  psql "${dbname}" << SQL
  ${commas}
  ${vacuum}
  SELECT
          CASE WHEN nspname = 'public' THEN relname ELSE nspname || '.' || relname END AS "relation",
          reltuples::integer as "rows",
          pg_size_pretty(pg_relation_size(c.oid)) AS "size"
    FROM  pg_class c
     LEFT JOIN pg_namespace n ON (n.oid = c.relnamespace)
    WHERE nspname NOT IN ('pg_catalog', 'information_schema')
    ${relkind}
    ORDER BY ${order}
    LIMIT ${limit};
SQL
fi
