#!/usr/bin/env ruby

# current branch = migrate_miq_groups
# git push origin -u # so it is tracking origin/migrate_miq_groups
# 
# given:
#   branch: migrate_miq_groups (tracking origin/migrate_miq_groups)
#   origin:   https://github.com/kbrock/manageiq
#   upstream: https://github.com/ManageIQ/manageiq
#
# git url 
#    http://github.com/kbrock/manageiq/tree/migrate_miq_groups
# git url origin
#    http://github.com/kbrock/manageiq/tree/migrate_miq_groups
# git url upstream
#    http://github.com/ManageIQ/manageiq/tree/migrate_miq_groups
# git url origin/branch2
#    http://github.com/kbrock/manageiq/tree/branch2
# git url compare
#    http://github.com/kbrock/manageiq/compare/migrate_miq_groups?expand=1
# git url origin compare # create a PR
#    http://github.com/kbrock/manageiq/compare/migrate_miq_groups?expand=1
# git url upstream compare # create a PR
#    http://github.com/ManageIQ/manageiq/master....kbrock:migrate_miq_groups/compare?expand=1
# git url origin a/b
#    http://github.com/kbrock/manageiq/tree/migrate_miq_groups/a/b
# git url origin a/b/c.rb
#    http://github.com/kbrock/manageiq/blob/migrate_miq_groups/a/b/c.rb

#require "uri"

class GitUrl
  attr_accessor :remote, :branch, :mode, :params

  def run(_env, argv)
    parse_args(argv)
    puts "#{base_url}/#{mode}/#{branch}#{params}"
  end

  def parse_args(argv)
    @remote, @branch, @mode, @params = extract_args(*argv)

    # uri escape, but don't escape the #, we want that
    # if @params.nil?
    # elsif @params.include?("#")
    #   parts = @params.split("#")
    #   @params = "#{URI.escape(parts[0])}##{parts[1]}"
    # else
    #   @params = URI.escape(@params)
    # end
  end

  def extract_args(remote = nil, mode = nil, params = nil)
    # assume they want a file if the remote is a filename
    if !params && !mode && (remote.nil? || (! %w(master origin upstream).include?(remote) && File.exist?(remote)))
      remote, params = cur_remote, remote
    end

    # assume they just wanted origin if the remote looks like a mode
    # alternative is to fall back to this mode if we do not recognize branch
    # just want to make sure we still work w/ a filename

    remote, mode, params = cur_remote, remote, mode if !params && %w(compare tree blob).include?(remote)
    remote, branch = remote.split("/") if remote

    branch = "master" if remote == "upstream" && branch.nil?

    # try out git rev-parse --symbolic-full-name @{upstream}
    branch ||= cur_branch
    remote ||= cur_remote(branch)

    # assume user gave us a param (ruby file, path) if the mode is not known
    mode, params = nil, mode if !params && mode && !%w(compare tree blob).include?(mode)

    if params
      if params =~ /\=/
        params = "?#{params}" unless params =~ /\?/
        mode ||= "compare"
      elsif params =~ /\./
        # expand the file and normalize to root git?
        params = params.gsub(/:([0-9]+)$/) { "#L#{$1}" }
        params = "/#{params}"
        mode ||= "blob"
      else
        params ="/#{params}"
        mode ||= "tree"
      end
    else
      mode ||= 'tree' # ***
    end

    params ||= '?expand=1' if mode == "compare"

    [remote, branch, mode, params]
  end

  def cur_branch
    git("symbolic-ref -q --short HEAD")
  end

  def cur_remote(branch = cur_branch)
    git("config branch.#{branch}.remote")
  end

  # echo $(git remote-url $1) | sed -e 'sX^git@\([^:]*\):Xhttp://\1/X' -e 'sX\.git$XX')
  # @param remote_url [String] git@domain:user/repo.git
  # @return http://domain/user/repo/
  def base_url
    # can we leverage url for?
    remote_url = git("config --get remote.#{remote}.url") # TODO: pass in
    remote_url.gsub(%r{^git@([^:]*):}){"http://#{$1}/"}.gsub(/\.git$/,'')
  end

  def git(*args)
    `git #{args.join(" ")}`.chomp
  end
end

if __FILE__ == $0
  GitUrl.new.run(ENV, ARGV)
end
