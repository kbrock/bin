#!/usr/bin/env ruby

# rake => bundle exec rake
# test/* => bundle exec ruby -Itest
# spec/* => bundle exec rspec (or ruby?)

STDOUT.sync = true

class Beer
  attr_accessor :cmd, :args
  def initialize(args)
    @cmd = args.shift
    @args = args
  end

  def tweak_cmd
    @cmd ||= "rake"
    if cmd == "gn" || cmd == "master"
      @cmd = "rspec"
      @args = `git diff master --name-only`.chomp.split
    elsif cmd == "head" || cmd == "gn"
      @cmd = "rspec"
      @args = `git diff HEAD --name-only`.chomp.split
    elsif cmd =~ /^(s|c|db|g|generate|server|console|dbconsole)$/
      @args.unshift cmd
      @cmd = "rails"
    # elsif cmd =~ %r{^test/}
    #   args.unshift cmd
    #   cmd = "ruby -I test"
    elsif cmd =~ %r{:[a-z]}
      args.unshift cmd
      @cmd = "rake"
    elsif cmd =~ %r{(:?[^r]|^)(spec|app|db)/} || cmd =~ /_spec.rb/
      args.unshift cmd
      @cmd = "rspec" # ruby -I rspec
    end
    self
  end

  def exists?(fn)
    File.exists?(x.gsub(/:[0-9]+$/,''))
  end

  def tweak_args
    if cmd == "rspec" || cmd == "subl"
      @args = args.map { |x|
        # convert models to spec names
        # migrations have a slightly different name, fix that too
        x.sub("migrate", "migrations").gsub(%r{(?:./)?(?:app|db)/(.*).rb}) { "spec/#{$1}_spec.rb" }
      # moved into flat_map (running match anyway)
      # }.select { |x|
      #   # only specs flow through
      #   x =~ /_spec.rb(:[0-9]+)?/
      }.flat_map { |x| 
        _, fn, line = x.match(/^(.*_spec.rb)(:[0-9]+)?$/).to_a
        
        if !fn
        elsif File.exists?(fn)
          [fn, line].join
        elsif fn !~ /\//
          Dir.glob("**/#{fn}").select { |x|
            x.to_s !~ /factories|work/
          }.map { |ref|
           "#{ref.to_s}#{line}"
          }
        end
      }.compact
    elsif cmd == "test"
      @args = %w(-I test) + args.map { |x| x }
    end
    @args = @args.uniq
    self
  end

  def cmd_line
    %w(bundle exec) + [cmd] + args.map(&:to_s)
  end

  def print
    puts cmd_line.join " "
    self
  end

  def run
    exec *cmd_line
    self
  end

  def self.run(args = ARGV)
    new(args).tweak_cmd.tweak_args.print.run
  end
end

Beer.run

