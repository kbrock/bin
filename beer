#!/usr/bin/env ruby

# rake => bundle exec rake
# test/* => bundle exec ruby -Itest
# spec/* => bundle exec rspec (or ruby?)

STDOUT.sync = true

class Beer
  attr_accessor :cmd, :args
  def initialize(args)
    @cmd = args.shift
    @args = args
  end

  def tweak_cmd
    @cmd ||= "rake"
    if cmd == "gn" || cmd == "master"
      @cmd = "rspec"
      @args = `git diff upstream/master... --name-only`.chomp.split("\n")
    elsif cmd == "head"
      @cmd = "rspec"
      @args = `git diff HEAD --name-only`.chomp.split("\n")
    elsif cmd =~ /^(s|c|db|g|r|generate|server|console|dbconsole|runner)$/
      ENV["ERB_IN_CONFIG"]="true"
      ENV["SKIP_PRIMORDIAL_SEED"]="false"
      @args.unshift cmd
      @cmd = "rails"
    # elsif cmd =~ %r{^test/}
    #   args.unshift cmd
    #   cmd = "ruby -I test"
    elsif cmd =~ /^(cop|rubocop|rubo)$/
      @cmd = "rubocop"
    elsif (cmd == "migrate" || cmd == "db:migrate") && args.empty?
      @args = %w(db:migrate db:schema:dump db:test:prepare) + @args
      @cmd = "rake"
    elsif cmd =~ %r{:[a-z]|-T}
      args.unshift cmd
      @cmd = "rake"
    elsif cmd =~ %r{(:?[^r]|^)(spec|app|db|lib)/} || cmd =~ /_spec.rb/
      args.unshift cmd
      @cmd = "rspec" # ruby -I rspec
    end
    self
  end

  def track_down(fn, lp = ':')
    fn, line = f_l(fn, lp)
    if !fn
      []
    elsif File.exists?(fn)
      [[fn, line].join]
    elsif !fn.include?('/')
      Dir.glob("**/#{fn}").select { |y| y.to_s !~ /factories\/|support\// }.map { |ref| "#{ref.to_s}#{line}" }
    else
      []
    end
  end

  def optionally_quote(phrase)
    if phrase.include?(" ")
      if phrase.include?('"')
        "'#{phrase}'"
      else
        "\"#{phrase}\""
      end
    else
      phrase
    end
  end

  def tweak_args
    if cmd == "rspec" || cmd == "subl"
      @args = args.flat_map do |x|
        # convert models to spec names
        # migrations have a slightly different name, fix that too

        next(x) if x.start_with?("-")
        x = x.sub("migrate", "migrations").gsub(%r{(?:./)?(?:app|db)/(.*).rb}) { "spec/#{$1}_spec.rb" }

        optionally_quote track_down(x).select {|f| f.include?("_spec.rb") }
      end
#    elsif cmd == "test"
#      @args = %w(-I test) + args.map { |x| x }
    elsif cmd == "rubocop"
      @args = args.flat_map { |x| track_down(x) }
    elsif cmd == "open"
      @args = args.flat_map { |x| track_down(x, '#L') }
                  .flat_map { |f| `git url upstream/master "#{f}"`.strip }.compact
    end
    @args = @args.uniq
    self
  end

  def f_l(fn, lp = ':')
    if fn =~ /:[0-9]+$/
      _, fn, line = fn.match(/^(.*)(:[0-9]+)$/).to_a
      [fn, line.sub(':', lp)]
    else
      [fn, nil]
    end
  end

  def cmd_line
    %w(bundle exec) + [cmd] + args.map(&:to_s)
  end

  def print
    puts (cmd_line + ["#", mug, mug]).join " "
    self
  end

  def run
    exec(*cmd_line)
  end

  def mug
    "\xF0\x9F\x8D\xBA"
  end

  def self.run(args = ARGV)
    new(args).tweak_cmd.tweak_args.print.run
  end
end

Beer.run

